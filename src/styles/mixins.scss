@import "../styles/variables.scss";
@import "../styles/functions.scss";

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin page-title {
    color: map-get($colors, red);
    font-family: 'intro_regular';
    font-size: 2rem;
    border: .5rem solid;
    padding: .25rem .5rem;
    text-align: center;
    position: absolute;
    z-index: 1;
    width: 100%;
    box-sizing: border-box;

    @include media(m) {
        font-size: 3rem;
    }
}

@mixin tilted-top($color: map-get($colors, off-white), $tilt: left, $height: 10vw, $width: 100vw) {
    position: relative;

    &::before {
        @include pseudo;
        top: -$height;
        left: 0;
        width: 0;
        height: 0;
        border-style: solid;
        @if ($tilt == left) {
            border-width: $height 0 0 $width;
            border-color: transparent transparent transparent $color;
        }
        @else if ($tilt == right) {
            border-width: 0 0 $height $width;
            border-color: transparent transparent $color transparent;
        }
    }
}

@mixin tilted-bottom($color: map-get($colors, off-white), $tilt: left, $height: 10vw, $width: 100vw) {
    position: relative;

    &::after {
        @include pseudo;
        bottom: -$height;
        left: 0;
        width: 0;
        height: 0;
        border-style: solid;
        @if ($tilt == left) {
            border-width: $height $width 0 0;
            border-color: $color transparent transparent transparent;
        }
        @else if ($tilt == right) {
            border-width: 0 $width $height 0;
            border-color: transparent $color transparent transparent;
        }
    }
}

@mixin tilted-title {
    transform: rotate(.75deg);
    text-indent: -.5rem;
    font-style: italic;
    font-size: 2rem;
    color: map-get($colors, green);
    line-height: 1.5;
    @include font($sans: false);
}

@mixin tilted-box {
    $angle: .75deg;
    background-color: map-get($colors, off-white);
    padding: .5rem;
    &:nth-child(odd) {
        transform: rotate($angle);

        & > * {
            transform: rotate(-$angle);
        }
    }

    &:nth-child(even) {
        transform: rotate(-$angle);

        & > * {
            transform: rotate($angle);
        }
    }
}

// @mixin bubble {
//     background-color: transparent;
//     margin-bottom: 2.25rem;
//     font-size: 1.5rem;
//     color: map-get($colors, red);
//     font-style: italic;
//     font-weight: bold;
//     max-width: 75%;
//     transform: rotate(-5deg);
//
//     &::before,
//     &::after {
//         @include pseudo;
//     }
//
//     &::before {
//         background-color: map-get($colors, off-white);
//         width: 60%;
//         height: 110%;
//         z-index: -1;
//         border-radius: .5rem;
//         bottom: 0;
//     }
//
//     &::after {
//         width: 0;
//         height: 0;
//         border-style: solid;
//         bottom: -1.25rem;
//     }
//
//     @include media(m) {
//         max-width: 50%;
//         font-size: 2rem;
//     }
//
//     @include media(l) {
//         grid-column: 1 / 2;
//         justify-self: center;
//         margin: 3rem 0 0;
//     }
// }

// @mixin krishi-bubble {
//     margin: 3rem 0;
//     padding: 0 0 0 1rem;
//
//     &::before {
//         left: 0;
//     }
//
//     &::after {
//         border-width: 1.25rem 1.25rem 0 0;
//         border-color: map-get($colors, off-white) transparent transparent transparent;
//         left: 1.25rem;
//     }
//
//     @include media(l) {
//         margin-bottom: 0;
//     }
// }

// @mixin garrett-bubble {
//     text-align: right;
//     padding: 0 1rem 0 0;
//
//     &::before {
//         right: 0;
//     }
//
//     &::after {
//         border-width: 0 1.25rem 1.25rem 0;
//         border-color: transparent map-get($colors, off-white) transparent transparent;
//         right: 1.25rem;
//     }
// }

@mixin dot {
    $dim: 2rem;
    width: $dim;
    height: $dim;
    background-color: map-get($colors, pink);
    border: solid 1rem map-get($colors, red);
    border-radius: 50%;
}

@mixin content-container {
    // @include tilted-top($color: map-get($colors, pink), $tilt: right);
    // @include tilted-bottom($color: map-get($colors, pink), $tilt: right);
    // background-color: map-get($colors, off-white);
    // padding: 1rem;
    // z-index: 1;
    position: relative;

    // @include media(m) {
    //     padding: 2rem 1rem 1rem;
    // }

    p {
        z-index: 1;
        position: relative;
        font-size: 1.25rem;
    }

    img {
        box-shadow: none !important;
    }

    @include media(m) {
        margin-top: 8rem;
    }
}

@mixin font($font-size: false, $color: false, $font-weight:false, $font-style: false, $line-height: false, $sans: true) {
    @if $font-size { font-size: $font-size; }
    @if $color { color: $color; }
    @if $font-weight { font-weight: $font-weight; }
    @if $line-height { line-height: $line-height; }
    @if $font-style { font-style: $font-style; }
    @if $sans { font-family: 'IBM Plex Sans', sans-serif; }
    @else { font-family: 'IBM Plex Serif', serif; }
}

// BREAKPOINTS
$breakpoints: (
    1: 320px,
    2: 768px,
    3: 1024px
);

@mixin media($size) {
    @if $size == s {
        $value: map-get($breakpoints, 2) - 1;
        @media only screen and (max-width: $value) {
            @content;
        }
    }
    @if $size == m {
        @media only screen and (min-width: map-get($breakpoints, 2)) {
            @content;
        }
    }
    @if $size == sm {
        $value: map-get($breakpoints, 3) - 1;
        @media only screen and (max-width: $value) {
            @content;
        }
    }
    @else if $size == l {
        @media only screen and (min-width: map-get($breakpoints, 3)) {
            @content;
        }
    }
}
